/*
 * TencentBlueKing is pleased to support the open source community by making
 * 蓝鲸智云 - 混合云管理平台 (BlueKing - Hybrid Cloud Management System) available.
 * Copyright (C) 2022 THL A29 Limited,
 * a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * We undertake not to change the open source license (MIT license) applicable
 *
 * to the current version of the project delivered to anyone in the future.
 */

package cvm

// GcpCvmExtension cvm extension.
type GcpCvmExtension struct {
	// DeletionProtection: Whether the instance created from this machine
	// image should be protected against deletion.
	DeletionProtection bool `json:"deletion_protection,omitempty"`

	// CanIpForward Allows this instance to send and receive packets with non-matching destination or
	// source IPs. This is required if you plan to use this instance to forward routes.
	CanIpForward             bool              `json:"can_ip_forward,omitempty"`
	CloudNetworkInterfaceIDs []string          `json:"cloud_network_interface_ids,omitempty"`
	Disks                    []GcpAttachedDisk `json:"disks,omitempty"`
	SelfLink                 string            `json:"self_link,omitempty"`
	// CpuPlatform The CPU platform used by this instance.
	CpuPlatform string `json:"cpu_platform,omitempty"`
	// Labels: Labels to apply to this instance. These can be later modified
	// by the setLabels method.
	Labels map[string]string `json:"labels,omitempty"`
	// MinCpuPlatform: Specifies a minimum CPU platform for the VM instance.
	// Applicable values are the friendly names of CPU platforms, such as
	// minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy
	// Bridge".
	MinCpuPlatform string `json:"min_cpu_platform,omitempty"`
	// StartRestricted Whether a VM has been restricted for
	// start because Compute Engine has detected suspicious activity.
	StartRestricted bool `json:"start_restricted,omitempty"`

	// ResourcePolicies: Resource policies applied to this instance.
	ResourcePolicies []string `json:"resource_policies,omitempty"`
	// ReservationAffinity: Specifies the reservations that this instance
	// can consume from.
	ReservationAffinity *GcpReservationAffinity `json:"reservation_affinity,omitempty"`
	// Fingerprint: Specifies a fingerprint for this resource, which is
	// essentially a hash of the instance's contents and used for optimistic
	// locking. The fingerprint is initially generated by Compute Engine and
	// changes after every request to modify or update the instance. You
	// must always provide an up-to-date fingerprint hash in order to update
	// the instance. To see the latest fingerprint, make get() request to
	// the instance.
	Fingerprint string `json:"fingerprint,omitempty"`

	AdvancedMachineFeatures *GcpAdvancedMachineFeatures `json:"advanced_machine_features,omitempty"`
}

// GcpAttachedDisk An instance-attached disk resource.
type GcpAttachedDisk struct {
	// Boot: Indicates that this is a boot disk. The virtual machine will
	// use the first partition of the disk for its root filesystem.
	Boot bool `json:"boot,omitempty"`

	// Index A zero-based index to this disk, where 0 is
	// reserved for the boot disk. If you have many disks attached to an
	// instance, each disk would have a unique index number.
	Index int64 `json:"index,omitempty"`

	CloudID string `json:"cloud_id,omitempty"`
}

// GcpReservationAffinity Specifies the reservations that this instance
// can consume from.
type GcpReservationAffinity struct {
	// ConsumeReservationType: Specifies the type of reservation from which
	// this instance can consume resources: ANY_RESERVATION (default),
	// SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved
	// instances for examples.
	//
	// Possible values:
	//   "ANY_RESERVATION" - Consume any allocation available.
	//   "NO_RESERVATION" - Do not consume from any allocated capacity.
	//   "SPECIFIC_RESERVATION" - Must consume from a specific reservation.
	// Must specify key value fields for specifying the reservations.
	//   "UNSPECIFIED"
	ConsumeReservationType string `json:"consume_reservation_type,omitempty"`

	// Key: Corresponds to the label key of a reservation resource. To
	// target a SPECIFIC_RESERVATION by name, specify
	// googleapis.com/reservation-name as the key and specify the name of
	// your reservation as its value.
	Key string `json:"key,omitempty"`

	// Values: Corresponds to the label values of a reservation resource.
	// This can be either a name to a reservation in the same project or
	// "projects/different-project/reservations/some-reservation-name" to
	// target a shared reservation in the same zone but in a different
	// project.
	Values []string `json:"values,omitempty"`
}

// GcpAdvancedMachineFeatures Specifies options for controlling advanced
// machine features. Options that would traditionally be configured in a
// BIOS belong here. Features that require operating system support may
// have corresponding entries in the GuestOsFeatures of an Image (e.g.,
// whether or not the OS in the Image supports nested virtualization
// being enabled or disabled).
type GcpAdvancedMachineFeatures struct {
	// EnableNestedVirtualization: Whether to enable nested virtualization
	// or not (default is false).
	EnableNestedVirtualization bool `json:"enable_nested_virtualization,omitempty"`

	// EnableUefiNetworking: Whether to enable UEFI networking for instance
	// creation.
	EnableUefiNetworking bool `json:"enable_uefi_networking,omitempty"`

	// ThreadsPerCore: The number of threads per physical core. To disable
	// simultaneous multithreading (SMT) set this to 1. If unset, the
	// maximum number of threads supported per core by the underlying
	// processor is assumed.
	ThreadsPerCore int64 `json:"threads_per_core,omitempty"`

	// VisibleCoreCount: The number of physical cores to expose to an
	// instance. Multiply by the number of threads per core to compute the
	// total number of virtual CPUs to expose to the instance. If unset, the
	// number of cores is inferred from the instance's nominal CPU count and
	// the underlying platform's SMT width.
	VisibleCoreCount int64 `json:"visible_core_count,omitempty"`
}
